require('dotenv').config();
const { Client, GatewayIntentBits, REST, Routes, SlashCommandBuilder, EmbedBuilder } = require('discord.js');
const axios = require('axios');
const config = require('../config.json');
const keepAlive = require('./keepAlive.js');

const client = new Client({
    intents: [
        GatewayIntentBits.Guilds,
        GatewayIntentBits.GuildMessages,
        GatewayIntentBits.MessageContent
    ]
});

const commands = [
    new SlashCommandBuilder()
        .setName('jeger')
        .setDescription('–°–∞–∑–Ω–∞—ò –≤–∏—à–µ –æ –à–µ–≥–µ—Ä–º–∞—ò—Å—Ç–µ—Ä—É'),
    new SlashCommandBuilder()
        .setName('cocktail')
        .setDescription('–ü—Ä–æ–Ω–∞—í–∏ —Ä–µ—Ü–µ–ø—Ç –∑–∞ –∫–æ–∫—Ç–µ–ª')
        .addStringOption(option =>
            option.setName('–∏–º–µ')
                .setDescription('–ò–º–µ –∫–æ–∫—Ç–µ–ª–∞')
                .setRequired(true)),
    new SlashCommandBuilder()
        .setName('random')
        .setDescription('–ü—Ä–æ–Ω–∞—í–∏ –Ω–∞—Å—É–º–∏—á–∞–Ω –∫–æ–∫—Ç–µ–ª')
];

const jagerFacts = [
    "–à–µ–≥–µ—Ä–º–∞—ò—Å—Ç–µ—Ä —Å–∞–¥—Ä–∂–∏ 56 —Ä–∞–∑–ª–∏—á–∏—Ç–∏—Ö —Ç—Ä–∞–≤–∞ –∏ –∑–∞—á–∏–Ω–∞! üåø",
    "–ò–º–µ –∑–Ω–∞—á–∏ '–ú–∞—ò—Å—Ç–æ—Ä –ª–æ–≤–∞—Ü' –Ω–∞ –Ω–µ–º–∞—á–∫–æ–º! üéØ",
    "–ù–∞—ò–±–æ—ô–µ —Å–µ —Å–ª—É–∂–∏ –ª–µ–¥–µ–Ω–æ —Ö–ª–∞–¥–∞–Ω –Ω–∞ -18¬∞C! ‚ùÑÔ∏è",
    "–à–µ–≥–µ—Ä–º–∞—ò—Å—Ç–µ—Ä —ò–µ —Å—Ç–≤–æ—Ä–∏–æ –ö—É—Ä—Ç –ú–∞—Å—Ç 1934. –≥–æ–¥–∏–Ω–µ! ü•É",
    "–õ–æ–≥–æ –ø—Ä–µ–¥—Å—Ç–∞–≤—ô–∞ –ø—Ä–∏—á—É –æ –°–≤–µ—Ç–æ–º –•—É–±–µ—Ä—Ç—É—Å—É! ü¶å",
    "–°–∞–¥—Ä–∂–∏ 35% –∞–ª–∫–æ—Ö–æ–ª–∞! üî•"
];

client.once('ready', async () => {
    console.log(`Logged in as ${client.user.tag}!`);
    
    const rest = new REST({ version: '10' }).setToken(process.env.TOKEN);
    try {
        await rest.put(
            Routes.applicationCommands(client.user.id),
            { body: commands },
        );
        console.log('Slash commands registered!');
    } catch (error) {
        console.error(error);
    }
});

client.on('interactionCreate', async interaction => {
    if (!interaction.isCommand()) return;

    if (interaction.commandName === 'jeger') {
        const randomFact = jagerFacts[Math.floor(Math.random() * jagerFacts.length)];
        await interaction.reply(randomFact);
    }

    if (interaction.commandName === 'koktel') {
        const cocktailName = interaction.options.getString('–∏–º–µ');
        try {
            const response = await axios.get(`https://www.thecocktaildb.com/api/json/v1/1/search.php?s=${encodeURIComponent(cocktailName)}`);
            
            if (!response.data.drinks) {
                await interaction.reply('–ù–∞–∂–∞–ª–æ—Å—Ç, –Ω–∏—Å–∞–º –ø—Ä–æ–Ω–∞—à–∞–æ —Ç–∞—ò –∫–æ–∫—Ç–µ–ª! üò¢');
                return;
            }

            const drink = response.data.drinks[0];
            const embed = new EmbedBuilder()
                .setTitle(drink.strDrink)
                .setColor(0x0099FF)
                .setThumbnail(drink.strDrinkThumb)
                .addFields(
                    { name: '–ö–∞—Ç–µ–≥–æ—Ä–∏—ò–∞', value: drink.strCategory || '–ù–∏—ò–µ –Ω–∞–≤–µ–¥–µ–Ω–æ' },
                    { name: '–¢–∏–ø —á–∞—à–µ', value: drink.strGlass || '–ù–∏—ò–µ –Ω–∞–≤–µ–¥–µ–Ω–æ' },
                    { name: '–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—ò–µ', value: drink.strInstructions || '–ù–∏—ò–µ –Ω–∞–≤–µ–¥–µ–Ω–æ' }
                );

            await interaction.reply({ embeds: [embed] });
        } catch (error) {
            console.error(error);
            await interaction.reply('–î–æ—à–ª–æ —ò–µ –¥–æ –≥—Ä–µ—à–∫–µ –ø—Ä–∏ –ø—Ä–µ—Ç—Ä–∞–∑–∏ –∫–æ–∫—Ç–µ–ª–∞! üò¢');
        }
    }

    if (interaction.commandName === 'random') {
        try {
            const response = await axios.get('https://www.thecocktaildb.com/api/json/v1/1/random.php');
            const drink = response.data.drinks[0];
            
            const embed = new EmbedBuilder()
                .setTitle(drink.strDrink)
                .setColor(0x0099FF)
                .setThumbnail(drink.strDrinkThumb)
                .addFields(
                    { name: '–ö–∞—Ç–µ–≥–æ—Ä–∏—ò–∞', value: drink.strCategory || '–ù–∏—ò–µ –Ω–∞–≤–µ–¥–µ–Ω–æ' },
                    { name: '–¢–∏–ø —á–∞—à–µ', value: drink.strGlass || '–ù–∏—ò–µ –Ω–∞–≤–µ–¥–µ–Ω–æ' },
                    { name: '–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—ò–µ', value: drink.strInstructions || '–ù–∏—ò–µ –Ω–∞–≤–µ–¥–µ–Ω–æ' }
                );

            await interaction.reply({ embeds: [embed] });
        } catch (error) {
            console.error(error);
            await interaction.reply('–î–æ—à–ª–æ —ò–µ –¥–æ –≥—Ä–µ—à–∫–µ –ø—Ä–∏ —Ç—Ä–∞–∂–µ—ö—É –Ω–∞—Å—É–º–∏—á–Ω–æ–≥ –∫–æ–∫—Ç–µ–ª–∞! üò¢');
        }
    }
});

// Start the keep-alive server
keepAlive();

client.login(process.env.TOKEN);
